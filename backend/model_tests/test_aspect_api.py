#!/usr/bin/env python3
"""
Test script for Aspect-Based Sentiment Analysis API endpoint
"""
import requests
import json

# Configuration
BASE_URL = "http://localhost:5001"

def test_health_check():
    """Test the health check endpoint"""
    print("üîç Testing health check...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed")
            print(f"   Status: {data.get('status')}")
            print(f"   Aspect model loaded: {data.get('aspect_loaded')}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_aspect_analysis(text, description=""):
    """Test aspect analysis with given text"""
    print(f"\nüéØ Testing aspect analysis{f' - {description}' if description else ''}...")
    print(f"   Input: {text}")
    
    try:
        response = requests.post(
            f"{BASE_URL}/aspect",
            json={"text": text},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Aspect analysis successful!")
            print(f"   Sentences analyzed: {data['statistics']['sentences_analyzed']}")
            print(f"   Total aspects found: {data['statistics']['total_aspects_found']}")
            
            for i, prediction in enumerate(data['predictions'], 1):
                aspects = prediction['aspects']
                if aspects:
                    print(f"   Sentence {i}: \"{prediction['sentence']}\"")
                    print(f"      ‚Üí Aspects: {', '.join(aspects)}")
                else:
                    print(f"   Sentence {i}: \"{prediction['sentence']}\"")
                    print(f"      ‚Üí No aspects detected")
            
            return True
        else:
            print(f"‚ùå Aspect analysis failed: {response.status_code}")
            if response.headers.get('content-type', '').startswith('application/json'):
                error_data = response.json()
                print(f"   Error: {error_data.get('message', 'Unknown error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Aspect analysis error: {e}")
        return False

def test_model_info():
    """Test the model info endpoint"""
    print("\nüìä Testing model info...")
    try:
        response = requests.get(f"{BASE_URL}/model-info")
        if response.status_code == 200:
            data = response.json()
            aspect_info = data.get('aspect_model', {})
            print("‚úÖ Model info retrieved successfully!")
            print(f"   Model: {aspect_info.get('model_name')}")
            print(f"   Type: {aspect_info.get('model_type')}")
            print(f"   Supported aspects: {aspect_info.get('aspects')}")
            print(f"   Loaded: {aspect_info.get('model_loaded')}")
            return True
        else:
            print(f"‚ùå Model info failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Model info error: {e}")
        return False

def test_error_cases():
    """Test error handling"""
    print("\nüö® Testing error cases...")
    
    # Test empty text
    print("   Testing empty text...")
    response = requests.post(f"{BASE_URL}/aspect", json={"text": ""})
    if response.status_code == 400:
        print("   ‚úÖ Empty text error handling works")
    else:
        print("   ‚ùå Empty text error handling failed")
    
    # Test missing text field
    print("   Testing missing text field...")
    response = requests.post(f"{BASE_URL}/aspect", json={})
    if response.status_code == 400:
        print("   ‚úÖ Missing text error handling works")
    else:
        print("   ‚ùå Missing text error handling failed")

def main():
    """Main test function"""
    print("üß™ Starting Aspect-Based Sentiment Analysis API Tests")
    print("=" * 60)
    
    # Test health check first
    if not test_health_check():
        print("\n‚ùå Health check failed. Make sure the server is running.")
        return
    
    # Test model info
    test_model_info()
    
    # Test cases with various Nepali texts
    test_cases = [
        ("‡§Ø‡•ã ‡§∏‡§∞‡§ï‡§æ‡§∞‡§≤‡•á ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•á‡§ï‡•ã ‡§õ‡•§", "Positive feedback"),
        ("‡§®‡•á‡§§‡§æ‡§π‡§∞‡•Å ‡§≠‡•ç‡§∞‡§∑‡•ç‡§ü ‡§õ‡§®‡•ç‡•§", "Negative feedback"),
        ("‡§Ø‡•ã ‡§µ‡§ø‡§ß‡•á‡§Ø‡§ï ‡§ñ‡§æ‡§∞‡•á‡§ú ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ‡•§", "Policy criticism"),
        ("‡§§‡•ç‡§Ø‡•ã ‡§Æ‡§æ‡§®‡•ç‡§õ‡•á‡§≤‡§æ‡§à ‡§§‡•Å‡§∞‡•Å‡§®‡•ç‡§§‡•à ‡§ï‡§æ‡§∞‡§¨‡§æ‡§π‡•Ä ‡§ó‡§∞‡§ø‡§Ø‡•ã‡§∏‡•ç‡•§", "Call for action"),
        ("‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø‡§ï‡•ã ‡§≠‡§æ‡§∑‡§£ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§∂‡§æ‡§≤‡•Ä ‡§•‡§ø‡§Ø‡•ã‡•§ ‡§Ø‡•ã ‡§®‡•Ä‡§§‡§ø ‡§®‡§ø‡§ï‡•à ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§õ‡•§", "Multiple sentences"),
        ("‡§ï‡•á‡§ü‡§æ‡§ï‡•á‡§ü‡•Ä‡§π‡§∞‡•Ç‡§≤‡•á ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§™‡§¢‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ‡•§", "General statement"),
        ("‡§ó‡§æ‡§≤‡•Ä ‡§ó‡§≤‡•å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§π‡•ã‡§á‡§®‡•§", "Profanity reference"),
        ("‡§π‡§ø‡§Ç‡§∏‡§æ ‡§ï‡§π‡§ø‡§≤‡•ç‡§Ø‡•à ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§π‡•ã‡§á‡§®‡•§", "Violence reference")
    ]
    
    # Run test cases
    for text, description in test_cases:
        test_aspect_analysis(text, description)
    
    # Test error cases
    test_error_cases()
    
    print("\n" + "=" * 60)
    print("üéâ Aspect-Based Sentiment Analysis API Tests Completed!")
    print("\nüí° Usage examples:")
    print("   curl -X POST http://localhost:5001/aspect \\")
    print("     -H \"Content-Type: application/json\" \\")
    print("     -d '{\"text\": \"‡§Ø‡•ã ‡§∏‡§∞‡§ï‡§æ‡§∞‡§≤‡•á ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•á‡§ï‡•ã ‡§õ‡•§\"}'")

if __name__ == "__main__":
    main()
