#!/usr/bin/env python3
"""
Test script for the NER API endpoint
"""

import requests
import json

BASE_URL = "http://localhost:5001"

def test_ner_endpoint():
    """Test the NER endpoint with sample Nepali text"""
    print("Testing NER Endpoint...")
    print("=" * 50)
    
    # Test text with multiple entities
    test_text = "‡§ï‡§æ‡§†‡§Æ‡§æ‡§°‡•å‡§Ç, ‡§™‡•ã‡§ñ‡§∞‡§æ, ‡§≤‡•Å‡§Æ‡•ç‡§¨‡§ø‡§®‡•Ä, ‡§ö‡§ø‡§§‡§µ‡§®, ‡§∞ ‡§Æ‡•Å‡§∏‡•ç‡§§‡§æ‡§ô ‡§®‡•á‡§™‡§æ‡§≤‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§™‡§∞‡•ç‡§Ø‡§ü‡§ï‡•Ä‡§Ø ‡§∏‡•ç‡§•‡§≤‡§π‡§∞‡•Ç ‡§π‡•Å‡§®‡•ç‡•§"
    
    try:
        response = requests.post(
            f"{BASE_URL}/ner",
            json={"text": test_text},
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"Status Code: {response.status_code}")
        data = response.json()
        
        if response.status_code == 200 and data.get("success"):
            print(f"‚úÖ NER successful!")
            print(f"Input text: {data['text']}")
            print(f"Found {data['entity_count']} entities:")
            
            for i, entity in enumerate(data['entities'], 1):
                print(f"  {i}. {entity['word']} ({entity['entity']}) - Confidence: {entity['confidence']}")
        else:
            print(f"‚ùå NER failed: {data}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_health_check():
    """Test the health check endpoint"""
    print("\nTesting Health Check...")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        data = response.json()
        print(f"Response: {json.dumps(data, indent=2)}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_additional_ner_samples():
    """Test with additional Nepali text samples"""
    print("\nTesting Additional NER Samples...")
    print("=" * 50)
    
    samples = [
        "‡§∞‡§æ‡§Æ ‡§∂‡§∞‡•ç‡§Æ‡§æ ‡§ï‡§æ‡§†‡§Æ‡§æ‡§°‡•å‡§Ç ‡§µ‡§ø‡§∂‡•ç‡§µ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§Æ‡§æ ‡§™‡§¢‡•ç‡§õ‡§®‡•ç‡•§",
        "‡§∏‡§ó‡§∞‡§Æ‡§æ‡§•‡§æ ‡§®‡•á‡§™‡§æ‡§≤‡§ï‡•ã ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§Ö‡§ó‡•ç‡§≤‡•ã ‡§π‡§ø‡§Æ‡§æ‡§≤ ‡§π‡•ã‡•§",
        "‡§ó‡•å‡§§‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß ‡§≤‡•Å‡§Æ‡•ç‡§¨‡§ø‡§®‡•Ä‡§Æ‡§æ ‡§ú‡§®‡•ç‡§Æ‡•á‡§ï‡§æ ‡§•‡§ø‡§è‡•§"
    ]
    
    for i, text in enumerate(samples, 1):
        print(f"\nSample {i}: {text}")
        try:
            response = requests.post(
                f"{BASE_URL}/ner",
                json={"text": text},
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print(f"  ‚úÖ Found {data['entity_count']} entities:")
                    for entity in data['entities']:
                        print(f"    - {entity['word']} ({entity['entity']})")
                else:
                    print(f"  ‚ùå Failed: {data}")
            else:
                print(f"  ‚ùå HTTP Error: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Error: {e}")

if __name__ == "__main__":
    print("üß™ Testing NepaliGPT + NER Flask API...")
    print("=" * 60)
    
    test_health_check()
    test_ner_endpoint()
    test_additional_ner_samples()
    
    print("\n" + "=" * 60)
    print("‚úÖ All tests completed!")
